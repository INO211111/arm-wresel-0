local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Loco-CTO/UI-Library/main/VisionLibV2/source.lua'))()

Window = Library:Create({
	Name = "Arm Simulator script.",
	Footer = "By Insertgeymer erm wataisgma",
	ToggleKey = Enum.KeyCode.RightShift,
	LoadedCallback = function()
		Window:TaskBarOnly(true)
	end,
	KeySystem = False,
	Key = "Insery1",
	MaxAttempts = 5,
	DiscordLink = nil,
	ToggledRelativeYOffset = 0
})

Window:ChangeTogglekey(Enum.KeyCode.RightShift)

local Tab = Window:Tab({
	Name = "Main Auto farm",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0)
})

local Section1 = Tab:Section({
	Name = "Auto farm"
})
local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Toggle/Auto Dumbells",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Toggle/Auto Dumbells",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the server event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                    -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.1) -- 0.1 seconds delay
                end
            end)()
        end
    end
})
local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Toggle/Auto Barbells",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Toggle/Auto Barbells",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the server event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

                    -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.1) -- 0.1 seconds delay
                end
            end)()
        end
    end
})

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Toggle/Auto Grips",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Toggle/Auto Dumbells",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the server event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()
               -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.1) -- 0.1 seconds delay
                end
            end)()
        end
    end
})

local Tab = Window:Tab({
	Name = "Main Auto farm Win",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0)
})

local Section1 = Tab:Section({
	Name = "Auto farm Win World 1"
})

local args = {
    [1] = "Bully",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("1"):WaitForChild("NPC"):WaitForChild("Bully"):WaitForChild("Table"),
    [3] = "1"
}

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm Bully",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.01) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "GymRat",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("1"):WaitForChild("NPC"):WaitForChild("GymRat"):WaitForChild("Table"),
    [3] = "1"
}

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm teacher",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm Gym rat",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "MafiaBoss",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("1"):WaitForChild("NPC"):WaitForChild("MafiaBoss"):WaitForChild("Table"),
    [3] = "1"
}

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm mafia Boss",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "Champion",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("1"):WaitForChild("NPC"):WaitForChild("Champion"):WaitForChild("Table"),
    [3] = "1"
}

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm Champion",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})


local Section1 = Tab:Section({
	Name = "Auto farm Win World 2"
})

local args = {
    [1] = "ScrapTrader",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("2"):WaitForChild("NPC"):WaitForChild("ScrapTrader"):WaitForChild("Table"),
    [3] = "2"
}

game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))


local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm ScrapTrader",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})

local args = {
    [1] = "CyberCop",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("2"):WaitForChild("NPC"):WaitForChild("CyberCop"):WaitForChild("Table"),
    [3] = "2"
}

game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm CyberCop",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "SlicerAssassin",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("2"):WaitForChild("NPC"):WaitForChild("SlicerAssassin"):WaitForChild("Table"),
    [3] = "2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm SlicerAssassin",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "RipperDoc",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("2"):WaitForChild("NPC"):WaitForChild("RipperDoc"):WaitForChild("Table"),
    [3] = "2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm RiipperDoc",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})
local args = {
    [1] = "RogueAi",
    [2] = workspace:WaitForChild("GameObjects"):WaitForChild("ArmWrestling"):WaitForChild("2"):WaitForChild("NPC"):WaitForChild("RogueAi"):WaitForChild("Table"),
    [3] = "2"
}

game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))


local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto farm RogueAi",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Auto Click",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the "onEnterNPCTable" event with the new args
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onEnterNPCTable"):FireServer(unpack(args))

                    -- Fire the "onClickRequest" event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RE"):WaitForChild("onClickRequest"):FireServer()

                    -- Add a delay to achieve 50 clicks per second
                    wait(0.02) -- 0.02 seconds delay = 50 times per second
                end
            end)()
        end
    end
})

-- Auto egg u wkauei 

local Tab = Window:Tab({
	Name = "Main Eggs",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0)
})

local Section1 = Tab:Section({
	Name = "Eggs World1"
})
local Button = Section1:Button({
    Name = "Earth Egg 1 Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Earth",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
        
    end
})
-- 
local Button = Section1:Button({
    Name = "Jungle Egg 5 Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Jungle",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
        
    end
})
--
local Button = Section1:Button({
    Name = "Epic Egg 35 Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Epic",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
      
    end
})
--
local Button = Section1:Button({
    Name = "Blackhole Egg 125 Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Blackhole",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
        
    end
})

local Section1 = Tab:Section({
	Name = "Eggs World2"
})

local Button = Section1:Button({
    Name = "Crystal Egg 7.5k Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Crystal",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
              
    end
})

local Button = Section1:Button({
    Name = "Molten Egg 22.5k Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Molten",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
        
              
    end
})

local Button = Section1:Button({
    Name = "Solar Egg 75k Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Solar",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
           
    end
})

local Button = Section1:Button({
    Name = "Moon Egg 225k Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Moon",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
                 
    end
})

local Button = Section1:Button({
    Name = "Ice Egg 650k Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Ice",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
                       
    end
})

local Button = Section1:Button({
    Name = "Burning Egg 2m Win",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        local args = {
            [1] = "Burning",
            [4] = false
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
                               
    end
})

local Tab = Window:Tab({
	Name = "Main Misc",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0)
})

local Section1 = Tab:Section({
	Name = "Gift/Claim/Open/Etc"
})

local Button = Section1:Button({
    Name = "Claim All Gift",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Claim All Rewards",
            Text = "Claiming all timed rewards...",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Define the args for each reward tier
        local rewardTiers = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"}

        -- Loop through each reward tier and fire the onClaim event
        for _, tier in ipairs(rewardTiers) do
            local args = {[1] = tier}
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer(unpack(args))
            wait(0.1) -- Add a small delay between claims to avoid spamming the server
        end

        -- Notify the user that all rewards have been claimed
        Library:Notify({
            Name = "Claim All Rewards",
            Text = "All timed rewards claimed!",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })
    end
})

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto Claim Reaward egg",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "yay!! Reward egg incomming",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Invoke the Claim remote function
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventEggService"):WaitForChild("RF"):WaitForChild("Claim"):InvokeServer()

                    -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.1) -- 0.1 seconds delay
                end
            end)()
        end
    end
})

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto open Endless Gift",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Open fr grah",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Define the args for the UseItem remote function
        local args = {
            [1] = "Endless Gift",
            [2] = "1"
        }

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Invoke the UseItem remote function
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))

                    -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.1) -- 0.1 seconds delay
                end
            end)()
        end
    end
})

local running = false -- Persistent variable to control the loop

local Toggle = Section1:Toggle({
    Name = "Auto Rebirth",
    Default = false,
    Callback = function(Bool)
        -- Notify the user about the toggle state
        Library:Notify({
            Name = "Rebirth Like ritleittlletretetertyut",
            Text = tostring(Bool),
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Update the running state
        running = Bool

        -- Start a loop when the toggle is enabled
        if Bool then
            coroutine.wrap(function()
                while running do
                    -- Fire the onRebirthRequest remote event
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("RebirthService"):WaitForChild("RE"):WaitForChild("onRebirthRequest"):FireServer()

                    -- Add a delay to prevent spamming the server (adjust the delay as needed)
                    wait(0.5) -- 0.1 seconds delay
                end
            end)()
        end
    end
})

local Tab = Window:Tab({
	Name = "Main Troll or skibkb toleit?!?!",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0)
})

local Section1 = Tab:Section({
	Name = "Erm random stuff",
})

local Button = Section1:Button({
    Name = "Teleport World1",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Define the args for the teleport remote event
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("1"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("BackToSchool")
        }

        -- Fire the teleport remote event
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))
    end
})

local Button = Section1:Button({
    Name = "Teleport World2",
    Callback = function()
        -- Notify the user that the button was clicked
        Library:Notify({
            Name = "Button",
            Text = "Clicked",
            Icon = "rbxassetid://11401835376",
            Duration = 3
        })

        -- Define the args for the teleport remote event
        local args = {
            [1] = workspace:WaitForChild("Zones"):WaitForChild("2"):WaitForChild("Interactables"):WaitForChild("Teleports"):WaitForChild("Locations"):WaitForChild("Spawn")
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ZoneService"):WaitForChild("RE"):WaitForChild("teleport"):FireServer(unpack(args))       
    end
})